//=====================================
//
//              Text Editor
//
//=====================================

include "inc/cmdsys.plh"
include "inc/args.plh"
include "inc/fileio.plh"
//
// Hardware constants
//
const csw           = $0036
const pushbttn1     = $C061
const pushbttn2     = $C062
const pushbttn3     = $C063
const keyboard      = $C000
const keystrobe     = $C010
//
// ASCII key values
//
const keyenter      = $8D
const keyspace      = $A0
const keyarrowup    = $8B
const keyarrowdown  = $8A
const keyarrowleft  = $88
const keyarrowright = $95
const keyescape     = $9B
const keyctrla      = $81
const keyctrlb      = $82
const keyctrlc      = $83
const keyctrld      = $84
const keyctrle      = $85
const keyctrlf      = $86
const keyctrli      = $89
const keyctrlk      = $8B
const keyctrll      = $8C
const keyctrln      = $8E
const keyctrlo      = $8F
const keyctrlp      = $90
const keyctrlq      = $91
const keyctrlr      = $92
const keyctrls      = $93
const keyctrlt      = $94
const keyctrlu      = $95
const keyctrlv      = $96
const keyctrlw      = $97
const keyctrlx      = $98
const keyctrlz      = $9A
const keydelete     = $FF
//
// Input buffer
//
const getbuff       = $01FF
//
// Data and text buffer constants
//
const maxlines      = 1500
const maxfill       = 1524
const maxlnlen      = 79
const pgjmp         = 16
const changed       = 1
const insmode       = 2
const showcurs      = 4
const uppercase     = 8
const shiftlock     = 128
//
// Text screen row address array
//
word txtscrn      = $0400,$0480,$0500,$0580,$0600,$0680,$0700,$0780
word              = $0428,$04A8,$0528,$05A8,$0628,$06A8,$0728,$07A8
word              = $0450,$04D0,$0550,$05D0,$0650,$06D0,$0750,$07D0
//
// Editor variables
//
byte nullstr      = ""
byte[64] txtfile  = "UNTITLED"
word strlinbuf     = $1000
word strpoolmap    = $1F00
word strpoolmsz    = 224 // $E0 = 28K is memory@16 bytes per bit map, 128 bytes per 8 bit map, 1K bytes per 8 byte map
word strpool       = $4800
word strpoolsz      = $7000
byte flags        = 0
byte flash        = 0
word numlines     = 0
word cutbuf       = 0
byte perr, cursx, cursy, scrnleft, curscol, underchr, curschr
word keyin, cursrow, scrntop, cursptr
//
// Predeclared functions
//
predef cmdmode
//
// Utility functions
//
// Defines for ASM routines
//
asm equates
	!SOURCE	"vmsrc/plvmzp.inc"
end
//def toupper(c)
//   if c >= 'a'
//       if c <= 'z'
//           return c - $20
//       fin
//   fin
//   return c
//end
asm toupper
        LDA     ESTKL,X
        AND     #$7F
        CMP     #'a'
        BCC     +
        CMP     #'z'+1
        BCS     +
        SEC
        SBC     #$20
+       STA     ESTKL,X
        RTS
end
asm clrhibit(strptr)
        LDA     ESTKL,X
        STA     SRCL
        LDA     ESTKH,X
        STA     SRCH
        LDY     #$00
        LDA     (SRC),Y
        BEQ     +
        TAY
CLHILP  LDA     (SRC),Y
        AND     #$7F
        STA     (SRC),Y
        DEY
        BNE     CLHILP
+       RTS
end
asm sethibit(strptr)
        LDA     ESTKL,X
        STA     SRCL
        LDA     ESTKH,X
        STA     SRCH
        LDY     #$00
        LDA     (SRC),Y
        BEQ     +
        TAY
STHILP  LDA     (SRC),Y
        ORA     #$80
        STA     (SRC),Y
        DEY
        BNE     STHILP
+       RTS
end
asm cpyln(srcstr, dststr)
        LDA     ESTKL,X
        STA     DSTL
        LDA     ESTKH,X
        STA     DSTH
        INX
        LDA     ESTKL,X
        STA     SRCL
        LDA     ESTKH,X
        STA     SRCH
        LDY     #$00
        LDA     (SRC),Y
        TAY
        LDA     #$00
        INY
        STA     (DST),Y
        DEY
        BEQ     ++
CPLNLP  LDA     (SRC),Y
        CMP     #$20
        BCS     +
        ADC     #$60
+       AND     #$7F
        STA     (DST),Y
        DEY
        BNE     CPLNLP
        LDA     (SRC),Y
++      STA     (DST),Y
        RTS
end

def crout
    cout($0D)
end
def bell
    cout($07)
end
//
// Memory management routines
//
def strcpy(dststr, srcstr)
    byte strlen

    strlen = ^srcstr
    while (srcstr).[strlen] == $8D or (srcstr).[strlen] == $A0
        strlen--
    loop
    ^dststr = strlen
    memcpy(dststr + 1, srcstr + 1, strlen)
end
def delstr(strptr)
    byte mask, ofst

    if strptr and strptr <> @nullstr
        mask = sizemask(^strptr + 1)
        ofst = (strptr - strheap) >> 4
        mask = mask << (ofst & $07)
        ofst = ofst >> 3
        strpoolmap->[ofst] = strpoolmap->[ofst] & ~mask
    fin
end
def newstr(strptr)
    byte strlen
    word newptr

    strlen = ^strptr
    while (strptr).[strlen] == $8D or (strptr).[strlen] == $A0
        strlen = strlen - 1
    loop
    if strlen == 0
        return @nullstr
    fin
    newptr = strpoolalloc(strlen + 1)
    if newptr
        memcpy(newptr, strptr, strlen + 1)
        ^newptr = strlen
        return newptr
    fin
    return @nullstr
end
def inittxtbuf#0
    word i

    strlinbuf     = $1000
    strpoolmap    = $1F00
    strpoolmsz    = 224 // $E0 = 28K is memory@16 bytes per bit map, 128 bytes per 8 bit map, 1K bytes per 8 byte map
    strpool       = $4800
    strpoolsz     = $7000

    memset(strpoolmap, strheapmsz, 0)
    memset(strlinbuf, maxfill * 2, @nullstr)
    numlines   = 1
    cursrow    = 0
    curscol    = 0
    cursx      = 0
    cursy      = 0
    scrnleft   = 0
    scrntop    = 0
    cutbuf     = 0
end
//
// Case conversion/printing routines
//
def caseconv(chr)
    if flags & uppercase
        if chr & $E0 == $E0
            chr = chr - $E0
        fin
    fin
    return chr
end
def strupper(strptr)#0
    byte i, chr

    for i = ^strptr downto 1
        chr = (strptr).[i]
        if chr & $E0 == $E0
            (strptr).[i] = chr - $E0
        fin
    next
end
def strlower(strptr)#0
    byte i, chr

    for i = ^strptr downto 1
        chr = (strptr).[i]
        if chr & $E0 == $00
            (strptr).[i] = chr + $E0
        fin
    next
end
def txtupper#0
    word i, strptr

    flags = flags | uppercase
    for i = numlines - 1 downto 0
        strupper(strlinbuf:[i])
    next
end
def txtlower#0
    word i, strptr

    flags = flags & ~uppercase
    for i = numlines - 1 downto 0
        strlower(strlinbuf:[i])
    next
end
def prbyte(h)#0
    cout('$')
    call($FDDA, h, 0, 0, 0)
end
def prword(h)#0
    cout('$')
    call($F941, h >> 8, h, 0, 0)
end
def print(i)#0
    byte numstr[7]
    byte place, sign

    place = 6
    if i < 0
        sign = 1
        i    = -i
    else
        sign = 0
    fin
    while i >= 10
        numstr[place] = i % 10 + '0'
        i             = i / 10
        place         = place - 1
    loop
    numstr[place] = i + '0'
    place         = place - 1
    if sign
        numstr[place] = '-'
        place         = place - 1
    fin
    numstr[place] = 6 - place
    puts(@numstr[place])
end
def nametostr(namestr, len, strptr)#0
    ^strptr = len
    memcpy(strptr + 1, namestr, len)
end
//
// File routines
//
def readtxt(filename)#0
    byte txtbuf[81], refnum, i, j

    refnum = open(filename, sysbuf)
    if refnum
        newline(refnum, $7F, $0D)
        repeat
            txtbuf = read(refnum, @txtbuf + 1, maxlnlen)
            if txtbuf
                sethibit(@txtbuf)
                if flags & uppercase; strupper(@txtbuf); fin
                strlinbuf:[numlines] = newstr(@txtbuf)
                numlines = numlines + 1
            fin
            if !(numlines & $0F); cout('.'); fin
        until txtbuf == 0 or numlines == maxlines
        close(refnum)
    	//
    	// Make sure there is a blank line at the end of the buffer
    	//
    	if numlines < maxlines and strlinbuf:[numlines - 1] <> @nullstr
    	    strlinbuf:[numlines] = @nullstr
    	    numlines = numlines + 1
    	fin
    fin
end
def writetxt(filename)#0
    byte txtbuf[81], refnum
    byte j, chr
    word i, strptr

    destroy(filename)
    create(filename, $C3, $04, $00) // full access, TXT file
    refnum = open(filename, sysbuf)
    if refnum == 0
        return
    fin
    //
    // Remove blank lines at end of text.
    //
    while numlines > 1 and strlinbuf:[numlines - 1] == @nullstr; numlines = numlines - 1; loop
    //
    // Write all the text line to the file.
    //
    for i = 0 to numlines - 1
        cpyln(strlinbuf:[i], @txtbuf)
        txtbuf = txtbuf + 1
        txtbuf[txtbuf] = $0D
        write(refnum, @txtbuf + 1, txtbuf)
        if !(i & $0F); cout('.'); fin
    next
    close(refnum)
end
//
// Screen routines
//
def clrscrn@0
    call($FC58, 0, 0, 0, 0)
end
def drawrow(row, ofst, strptr)#0
    byte numchars
    word scrnptr

    scrnptr = txtscrn[row]
    if ofst >= ^strptr
        numchars = 0
    else
        numchars = ^strptr - ofst
    fin
    if numchars >= 40
        numchars = 40
    else
        memset(scrnptr + numchars, 40 - numchars, $A0A0)
    fin
    memcpy(scrnptr, strptr + ofst + 1, numchars)
end
def drawscrn(toprow, ofst)#0
    byte row, numchars
    word strptr, scrnptr

    if ofst
        for row = 0 to 23
            strptr   = strlinbuf:[toprow + row]
    	    scrnptr  = txtscrn[row]
    	    if ofst >= ^strptr
    	        numchars = 0
    	    else
                numchars = ^strptr - ofst
    	    fin
    	    if numchars >= 40
                numchars = 40
    	    else
    	        memset(scrnptr + numchars, 40 - numchars, $A0A0)
       	    fin
	        memcpy(scrnptr, strptr + ofst + 1, numchars)
        next
    else
        for row = 0 to 23
            strptr   = strlinbuf:[toprow + row]
    	    scrnptr  = txtscrn[row]
    	    numchars = ^strptr
    	    if numchars >= 40
                numchars = 40
    	    else
    	        memset(scrnptr + numchars, 40 - numchars, $A0A0)
       	    fin
    	    memcpy(scrnptr, strptr + 1, numchars)
        next
    fin
end
def cursoff#0
    if flags & showcurs
        ^cursptr = underchr
        flags = flags & ~showcurs
    fin
end
def curson#0
    if !(flags & showcurs)
        cursptr  = txtscrn[cursy] + cursx
        underchr = ^cursptr
        ^cursptr = curschr
        flags = flags | showcurs
    fin
end
def cursflash#0
    if flags & showcurs
        if flash == 0
            ^cursptr = curschr
        elsif flash == 128
            ^cursptr = underchr
        fin
        flash++
    fin
end
def redraw#0
    cursoff
    drawscrn(scrntop, scrnleft)
    curson
end
def curshome#0
    cursoff
    cursrow  = 0
    curscol  = 0
    cursx    = 0
    cursy    = 0
    scrnleft = 0
    scrntop  = 0
    drawscrn(scrntop, scrnleft)
    curson
end
def cursend#0
    cursoff
    if numlines > 23
        cursrow  = numlines - 1
        cursy    = 23
        scrntop  = cursrow - 23
    else
        cursrow  = numlines - 1
        cursy    = numlines - 1
        scrntop  = 0
    fin
    curscol  = 0
    cursx    = 0
    scrnleft = 0
    drawscrn(scrntop, scrnleft)
    curson
end
def cursup#0
    if cursrow > 0
        cursoff
        cursrow = cursrow - 1
        if cursy > 0
            cursy = cursy - 1
        else
            scrntop = cursrow
            drawscrn(scrntop, scrnleft)
        fin
        curson
    fin
end
def pgup#0
    byte i

    for i = pgjmp downto 0
        cursup
    next
end
def cursdown#0
    if cursrow < numlines - 1
        cursoff
        cursrow = cursrow + 1
        if cursy < 23
            cursy = cursy + 1
        else
            scrntop = cursrow - 23
            drawscrn(scrntop, scrnleft)
        fin
        curson
    fin
end
def pgdown#0
    byte i

    for i = pgjmp downto 0
        cursdown
    next
end
def cursleft#0
    if curscol > 0
        cursoff
        curscol = curscol - 1
        if cursx > 0
            cursx = cursx - 1
        else
            scrnleft = curscol
            drawscrn(scrntop, scrnleft)
        fin
        curson
    fin
end
def pgleft#0
    byte i

    for i = 7 downto 0
        cursleft
    next
end
def cursright#0
    if curscol < 80
        cursoff
        curscol = curscol + 1
        if cursx < 39
            cursx = cursx + 1
        else
            scrnleft = curscol - 39
            drawscrn(scrntop, scrnleft)
        fin
        curson
    fin
end
def pgright#0
    byte i

    for i = 7 downto 0
        cursright
    next
end
//
// Keyboard routines
//
def keyin2e
    repeat
        cursflash
    until ^keyboard >= 128
    return ^keystrobe
end
def keyin2
    byte key

    repeat
        cursflash
        key = ^keyboard
        if key == keyctrll
            ^keystrobe
            flags = flags ^ shiftlock
            key   = 0
        fin
    until key >= 128
    ^keystrobe
    if key == keyctrln
        key = $DB // [
    elsif key == keyctrlp
        key = $DF // _
    elsif key == keyctrlb
        key = $DC // \
    elsif key == keyarrowleft
        if ^pushbttn3 < 128
            key = $FF
        fin
    elsif key >= $C0 and flags < shiftlock
        if ^pushbttn3 < 128
            if key == $C0
                key = $D0 // P
            elsif key == $DD
                key = $CD // M
            elsif key == $DE
                key = $CE // N
            fin
        else
           key = key | $E0
        fin
    fin
    return key
end
//
// Printer routines
//
def printtxt(slot)#0
    byte txtbuf[80]
    word i, scrncsw

    scrncsw = *csw
    *csw  = $C000 | (slot << 8)
    for i = 0 to numlines - 1
        cpyln(strlinbuf:[i], @txtbuf)
        puts(@txtbuf)
        crout
    next
    *csw = scrncsw
end
def openline(row)
    if numlines < maxlines
        memcpy(@strlinbuf:[row + 1], @strlinbuf:[row], (numlines - row) * 2)
        strlinbuf:[row] = @nullstr
        numlines = numlines + 1
        flags = flags | changed
        return TRUE
    fin
    bell
    return FALSE
end
def cutline#0
    freestr(cutbuf)
    cutbuf = strlinbuf:[cursrow]
    memcpy(@strlinbuf:[cursrow], @strlinbuf:[cursrow + 1], (numlines - cursrow) * 2)
    if numlines > 1
        numlines = numlines - 1
    fin
    flags = flags | changed
    if cursrow == numlines
        cursup
    fin
    redraw
end
def pasteline#0
    if cutbuf and numlines < maxlines
        memcpy(@strlinbuf:[cursrow + 1], @strlinbuf:[cursrow], (numlines - cursrow) * 2)
        strlinbuf:[cursrow] = newstr(cutbuf)
        numlines = numlines + 1
        flags = flags | changed
        redraw
    else
        bell
    fin
end
def joinline#0
    byte joinstr[80], joinlen

    if cursrow < numlines - 1
        strcpy(@joinstr, strlinbuf:[cursrow])
        joinlen = joinstr + ^(strlinbuf:[cursrow + 1])
        if joinlen < 80
            memcpy(@joinstr + joinstr + 1, strlinbuf:[cursrow + 1] + 1, ^(strlinbuf:[cursrow + 1]))
            joinstr = joinlen
            freestr(strlinbuf:[cursrow])
            strlinbuf:[cursrow] = newstr(@joinstr)
            freestr(strlinbuf:[cursrow + 1])
            numlines = numlines - 1
            memcpy(@strlinbuf:[cursrow + 1], @strlinbuf:[cursrow + 2], (numlines - cursrow) * 2)
            flags = flags | changed
            redraw
        else
            bell
        fin
    fin
end
def splitline#0
    byte splitstr[80], splitlen

    if openline(cursrow + 1)
        if curscol
            splitlen = ^(strlinbuf:[cursrow])
            if curscol < splitlen - 1
                memcpy(@splitstr + 1, strlinbuf:[cursrow] + curscol + 1, splitlen - curscol)
                splitstr = splitlen - curscol
                strlinbuf:[cursrow + 1] = newstr(@splitstr)
                memcpy(@splitstr + 1, strlinbuf:[cursrow] + 1, curscol)
                splitstr = curscol
                freestr(strlinbuf:[cursrow])
                strlinbuf:[cursrow] = newstr(@splitstr)
            fin
        else
            strlinbuf:[cursrow + 1] = strlinbuf:[cursrow]
            strlinbuf:[cursrow]     = @nullstr
        fin
        curscol  = 0
        cursx    = 0
        scrnleft = 0
        redraw
        cursdown
    fin
end
def editkey(key)
    if key >= keyspace
        return TRUE
    elsif key == keydelete
        return TRUE
    elsif key == keyctrld
        return TRUE
    elsif key == keyctrlr
        return TRUE
    fin
    return FALSE
end
def editline(key)
    byte editstr[80]
    word undoline

    if (editkey(key))
        flags = flags | changed
        memset(@editstr, 80, $A0A0)
        strcpy(@editstr, strlinbuf:[cursrow])
        undoline = strlinbuf:[cursrow]
        strlinbuf:[cursrow] = @editstr
        repeat
            if key >= keyspace
                if key == keydelete
                    if curscol > 0
                        if curscol <= editstr
                            memcpy(@editstr[curscol], @editstr[curscol + 1], editstr - curscol)
                            editstr = editstr - 1
                        fin
                        curscol = curscol - 1
                        cursoff
                        if cursx > 0
                            cursx = cursx - 1
                            drawrow(cursy, scrnleft, @editstr)
                        else
                            scrnleft = scrnleft - 1
                            drawscrn(scrntop, scrnleft)
                        fin
                        curson
                    fin
                elsif curscol < maxlnlen
                    curscol = curscol + 1
                    cursx   = cursx   + 1
                    if flags & insmode
                        if editstr < maxlnlen or editstr.maxlnlen == $A0
                            editstr = editstr + 1
                            if curscol >= editstr
                                editstr = curscol
                            else
                                memcpy(@editstr[curscol + 1], @editstr[curscol], editstr - curscol)
                            fin
                        else
                            curscol = curscol - 1
                            cursx   = cursx   - 1
                            key     = editstr[curscol]
                            bell
                        fin
                    else
                        if curscol > editstr
                            editstr = curscol
                        fin
                    fin
                    editstr[curscol] = caseconv(key)
                    cursoff
                    if cursx <= 39
                        drawrow(cursy, scrnleft, @editstr)
                    else
                        scrnleft = scrnleft + 1
                        cursx    = 39
                        drawscrn(scrntop, scrnleft)
                    fin
                    curson
                else
                    bell
                fin
            elsif key == keyctrld
                if curscol < editstr
                    strcpy(undoline, @editstr)
                    memcpy(@editstr[curscol + 1], @editstr[curscol + 2], editstr - curscol)
                    editstr = editstr - 1
                    cursoff
                    drawrow(cursy, scrnleft, @editstr)
                    curson
                fin
            elsif key == keyctrlr
                strcpy(@editstr, undoline)
                cursoff
                drawrow(cursy, scrnleft, @editstr)
                curson
            fin
            key = keyin()
        until not editkey(key)
        if editstr
            strlinbuf:[cursrow] = newstr(@editstr)
        else
            strlinbuf:[cursrow] = @nullstr
        fin
        freestr(undoline)
    fin
    return key
end
def editmode#0
    repeat
        when editline(keyin())
            is keyarrowup
                cursup; break
            is keyarrowdown
                cursdown; break
            is keyarrowleft
                cursleft; break
            is keyarrowright
                cursright; break
            is keyctrlw
                pgup; break
            is keyctrlz
                pgdown; break
            is keyctrla
                pgleft; break
            is keyctrls
                pgright; break
            is keyctrlq
                curshome; break
            is keyctrle
                cursend; break
            is keyctrlx
                cutline; break
            is keyctrlv
                pasteline; break
            is keyctrlf
    	        if numlines < maxlines and cursrow == numlines - 1
                    strlinbuf:[numlines] = @nullstr
        		    numlines = numlines + 1
        		fin
    	        cursdown
            is keyctrlo
                openline(cursrow)
                redraw
        		break
            is keyenter
                if flags & insmode
                    splitline
                else
                    openline(cursrow + 1)
                    cursdown
                    redraw
                fin
        		break
            is keyctrlt
                joinline; break
            is keyctrli
                if flags & insmode
                    flags = flags & ~insmode
                    curschr = ' '
                else
                    flags = flags | insmode
                    curschr = '+'
                fin
        		break
            is keyctrlc
                if flags & uppercase
                    txtlower
                else
                    txtupper
                fin
                redraw
        		break
            is keyescape
                cursoff
                cmdmode
                redraw
        		break
        wend
    until false
end
//
// Command mode
//
def prfiles(optpath)
    byte path[64]
    byte refnum
    byte firstblk
    byte entrylen, entriesblk
    byte i, type, len
    word entry, filecnt

    if ^optpath
        strcpy(@path, optpath)
    else
        getpfx(@path)
        puts(@path)
        crout
    fin
    refnum = open(@path, sysbuf)
    if perr
        return perr
    fin
    firstblk = 1
    repeat
        if read(refnum, databuff, 512) == 512
            entry = databuff + 4
            if firstblk
                entrylen   = databuff.$23
                entriesblk = databuff.$24
                filecnt    = databuff:$25
                entry      = entry + entrylen
            fin
            for i = firstblk to entriesblk
                type = ^entry
                if type <> 0
                    len = type & $0F
                    ^entry = len
                    puts(entry)
                    if type & $F0 == $D0 // Is it a directory?
                        cout('/')
                        len = len + 1
                    fin
                    for len = 20 - len downto 1
                        cout(' ')
                    next
                    filecnt = filecnt - 1
                fin
                entry = entry + entrylen
            next
            firstblk = 0
        else
            filecnt = 0
        fin
    until filecnt == 0
    close(refnum)
    crout
    return 0
end
def striplead(strptr, chr)#0
    while ^strptr and ^(strptr + 1) == chr
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr = ^strptr - 1
    loop
end
def parsecmd(strptr)
    byte cmd

    cmd = 0
    striplead(strptr, ' ')
    if ^strptr
        cmd = ^(strptr + 1)
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr = ^strptr - 1
    fin
    if ^strptr
        striplead(strptr, ' ')
    fin
    return cmd
end
def chkchng
    if flags & changed
        puts("LOSE CHANGES TO FILE (Y/N)?")
        if toupper(keyin()) == 'N'
            crout
            return FALSE
        fin
        crout
    fin
    return TRUE
end
def quit#0
    if chkchng
        exit
    fin
end
def cmdmode
    byte slot
    word cmdptr

    clrscrn
    puts("PLASMA ][ EDITOR VERSION 0.99")
    crout
    while TRUE
        puts(@txtfile)
        cmdptr = rdstr($BA)
        when toupper(parsecmd(cmdptr))
            is 'A'
                readtxt(cmdptr)
                flags = flags | changed
        		break
            is 'R'
                if chkchng
                    inittxtbuf
        		    numlines = 0
                    strcpy(@txtfile, cmdptr)
                    readtxt(@txtfile)
        		    if numlines == 0; numlines = 1; fin
                    flags = flags & ~changed
                fin
        		break
            is 'W'
                if ^cmdptr
                    strcpy(@txtfile, cmdptr)
                fin
                writetxt(@txtfile)
                //if flags & changed; fin
                flags = flags & ~changed
        		break
            is 'C'
                prfiles(cmdptr); break
            is 'P'
                setpfx(cmdptr); break
            is 'H'
                if ^cmdptr
                    slot = cmdptr.1 - '0'
                else
                    slot = 1
                fin
                printtxt(slot)
        		break
            is 'Q'
                quit
            is 'E'
            is 0
                return
            is 'N'
                if chkchng
                    inittxtbuf
                    strcpy(@txtfile, "UNTITLED")
                fin
        		break
            otherwise
                bell
                cout('?')
                crout
        wend
        if perr
            puts("ERROR: $")
            call($FDDA, perr, 0, 0, 0)
        else
            puts("OK")
        fin
        crout
    loop
end
//
// Init editor
//
if !(^MACHID & $80)
    flags = uppercase | shiftlock
    keyin = @keyin2
else
    keyin = @keyin2e
fin
inittxtbuf
if argbuff
    strcpy(@txtfile, @argbuff)
    puts(@txtfile)
    numlines = 0
    readtxt(@txtfile)
fin
curschr  = '+'
flags = flags | insmode
drawscrn(scrntop, scrnleft)
curson
editmode
done
