include "inc/cmdsys.plh"
byte console[]    = ".CONSOLE"
byte textmode[]   = 16, 0, 15
byte prefix[64] = ""
//
// Utility functions
//
asm saveX#0
        STX     XREG+1
end
asm restoreX#0
XREG    LDX     #$00
        RTS
end
//
// SOS routines
// FILE I/O
//
def getpfx(path)#1
    byte params[4]

    ^path    = 0
    params.0 = 2
    params:1 = path
    params.3 = 128
    syscall($C7, @params)
    return path
end
def setpfx(path)#1
    byte params[6]
    byte fileinfo[2]

    params.0 = 3
    params:1 = path
    params:3 = @fileinfo
    params.5 = 2
    if not syscall($C4, @params) and (fileinfo.1 == $00 or fileinfo.1 == $0F) // Make sure it's a directory
        params.0 = 1
        params:1 = path
        syscall($C6, @params)
    else
        getpfx(path) // Get current path
    fin
    return path
end
//
// CONSOLE I/O
//
def dev_control(devnum, code, list)#1
    byte params[5]

    params.0 = 3
    params.1 = devnum
    params.2 = code
    params:3 = list
    return syscall($83, @params)
end
def dev_getnum(name)#1
    byte params[4]

    params.0 = 2
    params:1 = name
    params.3 = 0
    syscall($84, @params)
    return params.3
end
def dev_info(devnum, name, list, listlen)#1
    byte params[7]

    params.0 = 4
    params.1 = devnum
    params:2 = name
    params:4 = list
    params.6 = listlen
    return syscall($85, @params)
end
def init_cons()#0
    byte nlmode[2]
    cmdsys.refcons = cmdsys:sysopen(@console)
    cmdsys:syswrite(cmdsys.refcons, @textmode, 3)
    cmdsys.devcons  = dev_getnum(@console)
    nlmode:0        = $0D80
    //nlmode.0 = $80
    //nlmode.1 = $0D
    dev_control(cmdsys.devcons, $02, @nlmode)
end
def volume(devname, volname)#1
    byte params[9]

    params.0 = 4
    params:1 = devname
    params:3 = volname
    params:5 = 0
    params:7 = 0
    return syscall($C5, @params)
end
//
// Command mode
//
def volumes()#0
    byte info[11]
    byte devname[17]
    byte volname[17]
    byte i

    for i = $01 to $18
        if dev_info(i, @devname, @info, 11) == 0
            puts(@devname)
            if volume(@devname, @volname) == 0
                puts(" => /")
                puts(@volname)
                putc('/')
            fin
            putln
        fin
    next
end
def catalog(path)#0
    byte refnum
    byte firstblk
    byte entrylen, entriesblk
    byte i, type, len
    word entry, filecnt, catptr

    if !^path
        path = @prefix
    fin
    refnum = cmdsys:sysopen(path)
    if not refnum
        return
    fin
    catptr = heapmark
    firstblk = 1
    repeat
        if cmdsys:sysread(refnum, catptr, 512) == 512
            entry = catptr + 4
            if firstblk
                entrylen   = catptr->$23
                entriesblk = catptr->$24
                filecnt    = catptr=>$25
                entry      = entry + entrylen
            fin
            for i = firstblk to entriesblk
                type = ^entry
                if type
                    len = type & $0F
                    ^entry = len
                    puts(entry)
                    type = ' '
                    when entry->$10
                        is $0F // Is it a directory?
                            type = '/'
                            break
                        is $FF // SYSTEM file
                            type = '-'
                            break
                        is $FE // REL file
                            type = '+'
                    wend
                    putc(type)
                    for len = 18 - len downto 0
                        putc(' ')
                    next
                    filecnt--
                fin
                entry = entry + entrylen
            next
            firstblk = 0
        else
            filecnt = 0
        fin
    until filecnt == 0
    cmdsys:sysclose(refnum)
    putln()
end
def stripchars(strptr)#1
    while ^strptr and ^(strptr + 1) > ' '
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr--
    loop
    return ^strptr
end
def stripspaces(strptr)#0
    while ^strptr and ^(strptr + ^strptr) <= ' '
        ^strptr--
    loop
    while ^strptr and ^(strptr + 1) <= ' '
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr--
    loop
end
def striptrail(strptr)#1
    byte i

    for i = 1 to ^strptr
        if ^(strptr + i) <= ' '
            ^strptr = i - 1
            break
        fin
    next
    return strptr
end
def parsecmd(strptr)#1
    byte cmd

    cmd = 0
    stripspaces(strptr)
    if ^strptr
        cmd = ^(strptr + 1)
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr--
    fin
    stripspaces(strptr)
    return cmd
end
//
// Command line handler
//
def shell#0
    byte err[]
    byte autorun
    word cmdptr
    //
    // Try to load autorun.
    //
    cmdptr   = heapmark
    ^cmdptr  = 0
    autorun  = cmdsys:sysopen("AUTORUN")
    if autorun > 0
        ^cmdptr = cmdsys:sysread(autorun, cmdptr + 1, 64)
        cmdsys:sysclose(autorun)
    fin
    //
    // Handle commands.
    //
    while 1
        if ^cmdptr
            when toupper(parsecmd(cmdptr))
                is 'C'
                    catalog(cmdptr)
                    break
                is 'P'
                    if ^cmdptr and ^(cmdptr + 1) <> '/'
                        strcat(@prefix, cmdptr)
                    else
                        strcpy(@prefix, cmdptr)
                    fin
                    setpfx(@prefix)
                    break
                is '/'
                    repeat
                        prefix--
                    until prefix[prefix] == '/'
                    if prefix > 1
                        setpfx(@prefix)
                    fin
                    break
                is 'S'
                    setpfx(cmdptr)
                    strcat(getpfx(cmdsys:syspath), "SYS/"))
                    break
                is 'V'
                    volumes
                    break
                is '+'
                    saveX
                    cmdsys:modexec(striptrail(cmdptr))
                    restoreX
                    cmdsys:sysclose(0)
                    init_cons
                    break
                otherwise
                    puts("?\n")
            wend
            if cmdsys.syserr
                err = cmdsys.syserr
                puts("ERR:$")
                putb(err)
            else
                puts("OK")
            fin
            putln
        fin
        puts(getpfx(@prefix))
        cmdptr = gets($BA)
        strcpy(cmdsys:cmdline, cmdptr)
    loop
end
//
// Init console.
//
init_cons
//
// Print PLASMA version
//
puts("PLASMA 2.0 Dev\n")//; putb(version.1); putc('.'); putb(version.0); putln
puts("MEM:$"); puth(heapavail); putln
//
// Save pointer to command line handler
//
cmdsys:cmdparser = @shell
done
