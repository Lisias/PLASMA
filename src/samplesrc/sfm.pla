include "inc/cmdsys.plh"
include "inc/hgrlib.plh"
include "inc/hgrsprite.plh"
include "inc/joybuzz.plh"
sysflags reshgr1 // Reserve HGR page 1

const NUMSTARS         = 32
const SHIP_SPRTNUM     = 0
const MISSLE_SPRTNUM   = 1
const WEB_SPRTBASE     = 2
const SPIDER_SPRTEBASE = 8
const FULL_CHARGE      = 20
const ATTACK_SPEED     = 12
const SWARM_LIMIT      = 52
const FASTMOVE_LIMIT   = 120
const WEB_LIMIT        = 152
const YSHIP            = 180

byte egg3   = $88,$88,$83,$33,$38,$88,$88
byte        = $88,$83,$33,$11,$33,$38,$88
byte        = $83,$31,$11,$11,$11,$13,$38
byte        = $33,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$33
byte        = $83,$31,$11,$11,$11,$13,$38
byte        = $88,$83,$33,$11,$33,$38,$88
byte        = $88,$88,$83,$33,$38,$88,$88
byte egg2   = $88,$88,$83,$33,$38,$88,$88
byte        = $88,$83,$33,$11,$33,$38,$88
byte        = $83,$30,$11,$00,$11,$13,$38
byte        = $33,$11,$00,$11,$00,$11,$33
byte        = $33,$00,$11,$00,$11,$00,$33
byte        = $33,$11,$00,$11,$00,$11,$33
byte        = $33,$00,$11,$00,$11,$00,$33
byte        = $33,$11,$00,$11,$00,$11,$33
byte        = $33,$00,$11,$00,$11,$00,$33
byte        = $83,$31,$00,$11,$00,$13,$38
byte        = $88,$83,$33,$00,$33,$38,$88
byte        = $88,$88,$83,$33,$38,$88,$88
byte egg1   = $88,$88,$83,$33,$38,$88,$88
byte        = $88,$83,$33,$00,$33,$38,$88
byte        = $83,$30,$00,$00,$00,$03,$38
byte        = $33,$00,$00,$00,$00,$00,$33
byte        = $33,$00,$00,$00,$00,$00,$33
byte        = $33,$00,$00,$00,$00,$00,$33
byte        = $33,$00,$00,$00,$00,$00,$33
byte        = $33,$00,$00,$00,$00,$00,$33
byte        = $33,$00,$00,$00,$00,$00,$33
byte        = $83,$30,$00,$00,$00,$03,$38
byte        = $88,$83,$33,$11,$33,$38,$88
byte        = $88,$88,$83,$33,$38,$88,$88
byte spider3 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
byte         = $33,$88,$83,$32,$22,$22,$23,$38,$88,$33
byte         = $83,$38,$83,$32,$22,$22,$23,$38,$83,$38
byte         = $88,$83,$33,$22,$22,$22,$22,$33,$38,$88
byte         = $33,$88,$33,$22,$22,$22,$22,$33,$88,$33
byte         = $88,$33,$38,$33,$22,$22,$33,$83,$33,$88
byte         = $88,$88,$83,$33,$22,$22,$33,$38,$88,$88
byte         = $88,$33,$33,$33,$22,$22,$33,$33,$33,$88
byte         = $33,$88,$88,$88,$33,$33,$88,$88,$88,$33
byte         = $88,$88,$33,$33,$22,$22,$33,$33,$88,$88
byte         = $88,$33,$88,$33,$22,$22,$33,$88,$33,$88
byte         = $33,$88,$88,$83,$32,$23,$38,$88,$88,$33
byte         = $88,$88,$88,$88,$33,$33,$88,$88,$88,$88
byte spider2 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
byte         = $33,$88,$83,$30,$02,$20,$03,$38,$88,$33
byte         = $83,$38,$83,$32,$20,$02,$23,$38,$83,$38
byte         = $88,$83,$33,$20,$02,$20,$02,$33,$38,$88
byte         = $33,$88,$33,$02,$20,$02,$20,$33,$88,$33
byte         = $88,$33,$38,$30,$02,$20,$03,$83,$33,$88
byte         = $88,$88,$83,$33,$20,$02,$33,$38,$88,$88
byte         = $88,$33,$33,$30,$02,$20,$03,$33,$33,$88
byte         = $33,$88,$88,$88,$33,$33,$88,$88,$88,$33
byte         = $88,$88,$33,$30,$02,$20,$03,$33,$88,$88
byte         = $88,$33,$88,$33,$20,$02,$33,$88,$33,$88
byte         = $33,$88,$88,$83,$32,$23,$38,$88,$88,$33
byte         = $88,$88,$88,$88,$33,$33,$88,$88,$88,$88
byte spider1 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
byte         = $33,$88,$83,$30,$00,$00,$03,$38,$88,$33
byte         = $83,$38,$83,$30,$00,$00,$03,$38,$83,$38
byte         = $88,$83,$33,$00,$00,$00,$00,$33,$38,$88
byte         = $33,$88,$33,$00,$00,$00,$00,$33,$88,$33
byte         = $88,$33,$38,$33,$00,$00,$33,$83,$33,$88
byte         = $88,$88,$83,$33,$00,$00,$33,$38,$88,$88
byte         = $88,$33,$33,$30,$00,$00,$03,$33,$33,$88
byte         = $33,$88,$88,$88,$33,$33,$88,$88,$88,$33
byte         = $88,$88,$33,$30,$00,$00,$03,$33,$88,$88
byte         = $88,$33,$88,$33,$00,$00,$33,$88,$33,$88
byte         = $33,$88,$88,$83,$30,$03,$38,$88,$88,$33
byte         = $88,$88,$88,$88,$33,$33,$88,$88,$88,$88
byte web1    =             $88,$83,$38,$88
byte         =             $88,$38,$83,$88
byte         =             $88,$38,$83,$88
byte         =             $88,$33,$33,$88
byte         =             $83,$38,$83,$38
byte         =             $83,$38,$83,$38
byte         =             $83,$38,$83,$38
byte         =             $33,$33,$33,$33
byte web2    =         $88,$33,$83,$38,$33,$88
byte         =         $88,$38,$83,$38,$83,$88
byte         =         $83,$38,$83,$38,$83,$38
byte         =         $83,$33,$33,$33,$33,$38
byte         =         $83,$38,$83,$38,$83,$38
byte         =         $83,$38,$83,$38,$83,$38
byte         =         $33,$88,$83,$38,$88,$33
byte         =         $33,$33,$33,$33,$33,$33
byte web3    = $88,$83,$38,$88,$88,$88,$88,$83,$38,$88
byte         = $88,$83,$38,$83,$38,$83,$38,$83,$38,$88
byte         = $88,$33,$88,$33,$88,$88,$33,$88,$33,$88
byte         = $88,$33,$33,$33,$33,$33,$33,$33,$33,$88
byte         = $83,$38,$88,$33,$83,$38,$33,$88,$83,$38
byte         = $83,$38,$83,$38,$83,$38,$83,$38,$83,$38
byte         = $33,$88,$83,$38,$83,$38,$83,$38,$88,$33
byte         = $33,$38,$33,$33,$33,$33,$33,$33,$33,$33
byte ship = $CC,$CC,$CC,$77,$CC,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $77,$CC,$77,$66,$77,$CC,$77
byte      = $77,$CC,$77,$66,$77,$CC,$77
byte      = $77,$CC,$77,$66,$77,$CC,$77
byte      = $77,$CC,$77,$77,$77,$CC,$77
byte      = $77,$CC,$77,$77,$77,$CC,$77
byte      = $77,$CC,$77,$77,$77,$CC,$77
byte      = $77,$C7,$77,$77,$77,$7C,$77
byte      = $77,$77,$75,$55,$57,$77,$77
byte      = $77,$77,$75,$55,$57,$77,$77
byte missle = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $C5,$55,$5C
byte        = $55,$55,$55
byte dummy = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
var sprtEgg1, sprtEgg2, sprtEgg3
var sprtSpider1, sprtSpider2, sprtSpider3
var sprtWeb1, sprtWeb2, sprtWeb3
var sprtShip, sprtMissle, sprtDummy
var[NUMSTARS]  xstar
byte[NUMSTARS] ystar
byte won, curstar
def initStars#0
    byte k
    
    xstar[0] = 99
    ystar[0] = 10
    hgrColor(3)
    hgrXorPlot(xstar[0], ystar[0])
    for k = 1 to NUMSTARS-1
        xstar[k] = (xstar[k - 1] + 97 - k) % 280
        ystar[k] = (ystar[k - 1] + 19 + k) % YSHIP
        hgrXorPlot(xstar[k], ystar[k])
    next
    curstar = 0
end
def updateStars#0
    hgrColor(3)
    hgrXorPlot(xstar[curstar], ystar[curstar])
    ystar[curstar]++
    if ystar[curstar] > YSHIP
        ystar[curstar] = 0
    fin
    hgrXorPlot(xstar[curstar], ystar[curstar])
    curstar++
    if curstar >= NUMSTARS; curstar = 0; fin
end
def game(spdrcnt)#1
  var[8] xspdr, yspdr, ixspdr, iyspdr, hatch
  var xship, xmissle, leftxlaser, rightxlaser, attack
  byte[8] life
  byte lasercharge, misslecnt, ymissle, leftylaser, rightylaser, lefthit, righthit, width
  byte spdrnum, k, xdelta, ydelta, btn0, btn1, webstate

  xship       = 140
  ymissle     = 255 // Not active value
  misslecnt   = 6
  lasercharge = FULL_CHARGE
  //
  // Initialize the spiders (first is special)
  //
  xspdr[0]  = 100
  ixspdr[0] = 1
  yspdr[0]  = 60
  iyspdr[0] = -1
  hatch[0]  = 1
  life[0]   = 3
  attack    = -1
  webstate  = 0
  //
  // Initialize spiders
  //
  spdrnum   = spdrcnt - 1
  for k = 1 to spdrnum
    spriteAdd(k + SPIDER_SPRTEBASE, spriteDup(sprtEgg3))
    xspdr[k]  = ((xspdr[k - 1] ^ 37) + 97) & 255
    ixspdr[k] = -ixspdr[k - 1]
    yspdr[k]  = ((yspdr[k - 1] ^ 29) + 53) & 63
    iyspdr[k] = -iyspdr[k - 1]
    hatch[k]  = k / 2 + 1//hatch[k - 1] + 1
    life[k]   = 3
  next
  //
  // Initialize missle display
  //
  hgrColor(3)
  hgrRect(0, YSHIP+3, 279, 191)
  for k = 0 to misslecnt-1
    spritePos(k * 16 + 160, 184, sprtMissle)
    spriteDrawXor(sprtMissle)
  next
  hgrColor(1)
  hgrRect(4, YSHIP+6, FULL_CHARGE * 4 + 4, 188)
  //
  // Main game loop
  //
  repeat
    //
    // Move living spiders
    //
    for k = 0 to spdrnum
      if life[k]
        yspdr[k] = yspdr[k] + iyspdr[k]
        if yspdr[k] < -5
          //
          // Above screen
          //
          iyspdr[k] = 1
          if hatch[k]
            hatch[k]--
            if hatch[k] == 0
              //
              // Hatch this egg into a spider
              //
              life[k] = 3 // Reset life
              spriteAdd(k + SPIDER_SPRTEBASE, spriteDup(sprtSpider3))
            fin
          fin
        fin
        if yspdr[k] > SWARM_LIMIT
          //
          // Attack or not?
          //
          if hatch[k] == 0 and attack < 0
            attack = k
            iyspdr[k] = ATTACK_SPEED
          fin
          if attack == k
            //
            // Attacking
            //
            if yspdr[k] > WEB_LIMIT
              //
              // Iterate through web sequence
              //
              when webstate
                is 10
                  iyspdr[k] = -8 // Retreat
                  yspdr[k]  = WEB_LIMIT
                  spriteDel(2)
                  spriteDel(3)
                  spriteDel(4)
                  webstate = 0
                  break
                is 0
                  iyspdr[k] = 0
                  spriteAdd(2, sprtWeb1)
                  spritePosIndex(xspdr[k], WEB_LIMIT+7, 2)
                  webstate = 1
                  break
                is 1
                  spriteAdd(3, sprtWeb2)
                  spritePosIndex(xspdr[k], WEB_LIMIT+15, 3)
                  webstate = 2
                  break
                is 2
                  spriteAdd(4, sprtWeb3)
                  spritePosIndex(xspdr[k], WEB_LIMIT+22, 4)
                  webstate = 3
                otherwise
                  //
                  // States 3..9 just repeat this
                  //
                  if xship >= xspdr[k] - 17 and xship <= xspdr[k] + 17
                    //
                    // Capture ship
                    //
                    return FALSE
                  fin
                  webstate++
              wend
            else
              if iyspdr[k] > 0
                //
                // Move towards player during attack, but not too fast
                //
                xspdr[k] = xspdr[k] + (xship - xspdr[k]) / (yspdr[k] > FASTMOVE_LIMIT ?? 2 :: 4)
              else
                //
                // Retreat at a progressively faster rate
                //
                if ixspdr[k] > 0
                  xspdr[k] = xspdr[k] + (WEB_LIMIT - yspdr[k]) / 8
                else
                  xspdr[k] = xspdr[k] - (WEB_LIMIT - yspdr[k]) / 8
                fin
              fin
            fin
          else
            //
            // Just reverse direction towards top of screen
            //
            iyspdr[k] = -1
          fin
        else
          if attack == k
            //
            // Retreated back to swarm zone so stop attack
            //
            attack    = -1
            iyspdr[k] = -1
          fin
          //
          // Swarm movement
          //
          if ixspdr[k] > 0
            xspdr[k] = xspdr[k] + yspdr[k] / 8
          else
            xspdr[k] = xspdr[k] - yspdr[k] / 8
          fin
          if xspdr[k] < -5 or xspdr[k] > 284
            if xspdr[k] < -5
              xspdr[k]  = -5
              ixspdr[k] = 1
            else
              xspdr[k]  = 284
              ixspdr[k] = -1
            fin
          fin
        fin
        spritePosIndex(xspdr[k], yspdr[k], k+SPIDER_SPRTEBASE)
      fin
    next
    //
    // Move ship
    //
    xdelta, ydelta, btn0, btn1 = joypos(ymissle/4)
    xship = xship + ((xdelta + 4) / 8 - 5)
    if xship < 0;   xship = 0;   fin
    if xship > 279; xship = 279; fin
    if btn0 and misslecnt and ymissle == 255
      //
      // Fire missle
      //
      xmissle = xship
      ymissle = YSHIP+8
      misslecnt--
      spritePos(misslecnt * 16 + 160, 184, sprtMissle) // Erase from armory
      spriteDrawXor(sprtMissle)
      spriteAdd(1, sprtMissle)
    fin
    if ymissle <> 255
      if ymissle < 8
        //
        // Missle off top of screen
        //
        spriteDel(1)
        ymissle = 255
      else
        ymissle = ymissle - 8
        spritePosIndex(xmissle, ymissle, MISSLE_SPRTNUM)
        for k = 0 to spdrnum
          if life[k]
            //
            // Hit test will all living spiders
            //
            if ymissle >= yspdr[k] - 15 and ymissle <= yspdr[k] + 5
              if hatch[k]
                width = 7 // Egg width
              else
                width = 10 // Spider width
              fin
              if xmissle >= xspdr[k] - width and xmissle <= xspdr[k] + width
                //
                // Hit & kill spider
                //
                life[k] = 0
                spriteAdd(k+SPIDER_SPRTEBASE, spriteDup(sprtDummy))
                spritePosIndex(0, 0, k+SPIDER_SPRTEBASE)
                if attack == k // Was it attacking?
                  attack = -1
                  spriteDel(2)
                  spriteDel(3)
                  spriteDel(4)
                  webstate = 0
                fin
                spdrcnt--
                if not spdrcnt
                  return TRUE
                fin
                //
                // Remove missle
                //
                spriteDel(MISSLE_SPRTNUM)
                ymissle = 255
              fin
            fin
          fin
        next
      fin
    fin
    if lasercharge < FULL_CHARGE
        lasercharge++
        hgrColor(1)
        hgrRect(4, YSHIP+6, lasercharge * 4 + 4, 188)
//        hgrRect((lasercharge - 1) * 4 + 5, YSHIP+6, lasercharge * 4 + 4, 188)
    fin
    if btn1 and lasercharge == FULL_CHARGE
      //
      // Fire laser
      //
      hgrColor(0)
      hgrRect(4, YSHIP+6, FULL_CHARGE * 4 + 4, 188)
      lasercharge = 0
      leftxlaser  = xship - 7
      rightxlaser = xship + 7
      leftylaser  = 0
      rightylaser = 0
      lefthit     = 255
      righthit    = 255
      for k = 0 to spdrnum
        if life[k]
          //
          // Hit test will all living spiders
          //
          if hatch[k]
            width = 7 // Egg width
          else
            width = 10 // Spider width
          fin
          if leftxlaser >= xspdr[k] - width and leftxlaser <= xspdr[k] + width
            if yspdr[k] > leftylaser
              lefthit    = k
              leftylaser = yspdr[k]
            fin
          fin
          if rightxlaser >= xspdr[k] - width and rightxlaser <= xspdr[k] + width
            if yspdr[k] > rightylaser
              righthit    = k
              rightylaser = yspdr[k]
            fin
          fin
        fin
      next
      //
      // Draw Laser beams
      //
      hgrColor(3)
      for k=0 to 1
        if leftxlaser  + k >= 0; hgrXorVLin(leftylaser,  YSHIP+8, leftxlaser+k);  fin
        if rightxlaser + k < 280;hgrXorVLin(rightylaser, YSHIP+8, rightxlaser-k); fin
      next
      if lefthit <> 255
        //
        // Hit
        //
        life[lefthit]--
        if not life[lefthit]
          //
          // Kill spider
          //
          spriteAdd(lefthit + SPIDER_SPRTEBASE, spriteDup(sprtDummy))
          spritePosIndex(0, 0, lefthit + SPIDER_SPRTEBASE)
          if attack == lefthit // Was it attacking?
            spriteDel(2)
            spriteDel(3)
            spriteDel(4)
            webstate = 0
            attack   = -1
          fin
          spdrcnt--
          if not spdrcnt
            return TRUE
          fin
        else
          //
          // Dim color to show life status
          //
          if hatch[lefthit]
            spriteAdd(lefthit + SPIDER_SPRTEBASE, spriteDup(life[lefthit] == 2 ?? sprtEgg2 :: sprtEgg1))
          else
            spriteAdd(lefthit + SPIDER_SPRTEBASE, spriteDup(life[lefthit] == 2 ?? sprtSpider2 :: sprtSpider1))
          fin
          spritePosIndex(xspdr[lefthit], yspdr[lefthit], lefthit+SPIDER_SPRTEBASE)
        fin
      fin
      if righthit <> 255 and life[righthit]
        //
        // Hit
        //
        life[righthit]--
        if not life[righthit]
          //
          // Kill spider
          //
          spriteAdd(righthit + SPIDER_SPRTEBASE, spriteDup(sprtDummy))
          spritePosIndex(0, 0, righthit + SPIDER_SPRTEBASE)
          if attack == righthit // Was it attacking?
            spriteDel(2)
            spriteDel(3)
            spriteDel(4)
            webstate = 0
            attack   = -1
          fin
          spdrcnt--
          if not spdrcnt
            return TRUE
          fin
        else
          //
          // Dim color to show life status
          //
          if hatch[righthit]
            spriteAdd(righthit + SPIDER_SPRTEBASE, spriteDup(life[righthit] == 2 ?? sprtEgg2 :: sprtEgg1))
          else
            spriteAdd(righthit + SPIDER_SPRTEBASE, spriteDup(life[righthit] == 2 ?? sprtSpider2 :: sprtSpider1))
          fin
          spritePosIndex(xspdr[righthit], yspdr[righthit], righthit+SPIDER_SPRTEBASE)
        fin
      fin
      //
      // Undraw lasers
      //
      hgrColor(3)
      for k=0 to 1
        if leftxlaser  + k >= 0; hgrXorVLin(leftylaser,  YSHIP+8, leftxlaser+k);  fin
        if rightxlaser + k < 280;hgrXorVLin(rightylaser, YSHIP+8, rightxlaser-k); fin
      next
    fin
    spritePosIndex(xship, YSHIP, SHIP_SPRTNUM)
    spriteDrawXorList()
    updateStars
  until ^$C000 == $9B
  getc
  return FALSE
end

hgrMode
spriteDrawBuf(hgrDrawBuf(0)) // So we can see the compile process
sprtShip   = spriteCompile(14, 14,  7, 13, @ship)
sprtMissle = spriteCompile( 6,  8,  3,  0, @missle)
sprtEgg3   = spriteCompile(14, 12,  7,  6, @egg3)
sprtEgg2   = spriteCompile(14, 12,  7,  6, @egg2)
sprtEgg1   = spriteCompile(14, 12,  7,  6, @egg1)
sprtSpider3= spriteCompile(20, 13, 10,  6, @spider3)
sprtSpider2= spriteCompile(20, 13, 10,  6, @spider2)
sprtSpider1= spriteCompile(20, 13, 10,  6, @spider1)
sprtWeb1   = spriteCompile( 8,  8,  4,  0, @web1)
sprtWeb2   = spriteCompile(12,  8,  6,  0, @web2)
sprtWeb3   = spriteCompile(20,  8, 10,  0, @web3)
sprtDummy  = spriteCompile( 7,  8,  0,  0, @dummy)
hgrColor(0)
hgrClear()
spriteAdd(SHIP_SPRTNUM, sprtShip)
spriteAdd(SPIDER_SPRTEBASE, sprtEgg3)
initStars
won = game(8)
txtMode
puts(won ?? "You won!\n" :: "You lost.\n")
done
