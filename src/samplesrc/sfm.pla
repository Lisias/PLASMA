include "inc/cmdsys.plh"
include "inc/hgrlib.plh"
include "inc/hgrsprite.plh"
include "inc/lines.plh"
include "inc/joybuzz.plh"
sysflags reshgr1|reshgr2 // Reserve HGR page 1 and 2

byte egg    = $88,$88,$83,$33,$33,$33,$33,$38,$88,$88
byte        = $88,$83,$33,$11,$11,$11,$11,$33,$38,$88
byte        = $83,$31,$11,$11,$11,$11,$11,$11,$13,$38
byte        = $33,$11,$11,$11,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$11,$11,$11,$33
byte        = $33,$11,$11,$11,$11,$11,$11,$11,$11,$33
byte        = $83,$31,$11,$11,$11,$11,$11,$11,$13,$38
byte        = $88,$83,$33,$11,$11,$11,$11,$33,$38,$88
byte        = $88,$88,$83,$33,$33,$33,$33,$38,$88,$88
byte spider = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
byte        = $33,$88,$83,$32,$22,$22,$23,$38,$88,$33
byte        = $83,$38,$83,$32,$22,$22,$23,$38,$83,$38
byte        = $88,$83,$33,$22,$22,$22,$22,$33,$38,$88
byte        = $33,$88,$33,$22,$22,$22,$22,$33,$88,$33
byte        = $88,$33,$38,$33,$22,$22,$33,$83,$33,$88
byte        = $88,$88,$83,$33,$22,$22,$33,$38,$88,$88
byte        = $88,$33,$33,$33,$22,$22,$33,$33,$33,$88
byte        = $33,$88,$88,$88,$33,$33,$88,$88,$88,$33
byte        = $88,$88,$33,$33,$22,$22,$33,$33,$88,$88
byte        = $88,$33,$88,$33,$22,$22,$33,$88,$33,$88
byte        = $33,$88,$88,$83,$32,$23,$38,$88,$88,$33
byte        = $88,$88,$88,$88,$33,$33,$88,$88,$88,$88
byte web1   =             $88,$83,$38,$88
byte        =             $88,$38,$83,$88
byte        =             $88,$38,$83,$88
byte        =             $88,$33,$33,$88
byte        =             $83,$38,$83,$38
byte        =             $83,$38,$83,$38
byte        =             $83,$38,$83,$38
byte        =             $33,$33,$33,$33
byte web2   =         $88,$33,$83,$38,$33,$88
byte        =         $88,$38,$83,$38,$83,$88
byte        =         $83,$38,$83,$38,$83,$38
byte        =         $83,$33,$33,$33,$33,$38
byte        =         $83,$38,$83,$38,$83,$38
byte        =         $83,$38,$83,$38,$83,$38
byte        =         $33,$88,$83,$38,$88,$33
byte        =         $33,$33,$33,$33,$33,$33
byte web3   = $88,$83,$38,$88,$88,$88,$88,$83,$38,$88
byte        = $88,$83,$38,$83,$38,$83,$38,$83,$38,$88
byte        = $88,$33,$88,$33,$88,$88,$33,$88,$33,$88
byte        = $88,$33,$33,$33,$33,$33,$33,$33,$33,$88
byte        = $83,$38,$88,$33,$83,$38,$33,$88,$83,$38
byte        = $83,$38,$83,$38,$83,$38,$83,$38,$83,$38
byte        = $33,$88,$83,$38,$83,$38,$83,$38,$88,$33
byte        = $33,$38,$33,$33,$33,$33,$33,$33,$33,$33
byte ship = $CC,$CC,$CC,$77,$CC,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
byte      = $77,$CC,$77,$66,$77,$CC,$77
byte      = $77,$CC,$77,$66,$77,$CC,$77
byte      = $77,$CC,$77,$66,$77,$CC,$77
byte      = $77,$CC,$77,$77,$77,$CC,$77
byte      = $77,$CC,$77,$77,$77,$CC,$77
byte      = $77,$CC,$77,$77,$77,$CC,$77
byte      = $77,$C7,$77,$77,$77,$7C,$77
byte      = $77,$77,$75,$55,$57,$77,$77
byte      = $77,$77,$75,$55,$57,$77,$77
byte missle = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $CC,$55,$CC
byte        = $C5,$55,$5C
byte        = $55,$55,$55
byte dummy = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
byte       = $88,$88,$88,$88
var sprtEgg, sprtSpider, sprtWeb1, sprtWeb2, sprtWeb3
var sprtShip, sprtMissle, sprtDummy

def moire#0
  var i

  setlinespans(@hgrHlin, @hgrVlin)
  setlineplot(@hgrPlot)
  hgrColor(7)
  for i = 0 to 191 step 8
    linespans(0, i, 279, 191 - i)
  next
  for i = 0 to 279 step 9
    linespans(i, 0, 279 - i, 191)
  next
end
def game(spdrcnt)#0
  var[14] xspdr, yspdr, ixspdr, iyspdr, hatch
  var xship, xmissle, attack
  byte yship, ymissle
  byte spdrnum, k, xdelta, ydelta, btn0, btn1

  xship     = 140
  ymissle   = 255
  xspdr[0]  = 100
  ixspdr[0] = 1
  yspdr[0]  = 60
  iyspdr[0] = -1
  hatch[0]  = 1
  attack    = -1
  spdrnum   = spdrcnt - 1
  for k = 1 to spdrnum
    spriteAdd(k + 8, spriteDup(sprtEgg))
    xspdr[k]  = ((xspdr[k - 1] ^ 37) + 97) & 255
    ixspdr[k] = -ixspdr[k - 1]
    yspdr[k]  = ((yspdr[k - 1] ^ 29) + 53) & 63
    iyspdr[k] = -iyspdr[k - 1]
    hatch[k]  = hatch[k - 1] + 1
  next
  repeat
    for k = 0 to spdrnum
      if yspdr[k] <> 255
        yspdr[k] = yspdr[k] + iyspdr[k]
        if yspdr[k] < -5
          iyspdr[k] = 1
          if hatch[k]
            hatch[k]--
            if hatch[k] == 0
                spriteAdd(k + 8, spriteDup(sprtSpider))
            fin
          fin
        fin
        if yspdr[k] > 64 // Attack or not?
          if hatch[k] == 0 and attack < 0
            attack = k
            iyspdr[k] = 8
          fin
          if attack == k
            if yspdr[k] > 160
              iyspdr[k] = -8 // Retreat
            fin
            if iyspdr[k] > 0 // Attacking
              xspdr[k] = xspdr[k] + (xship - xspdr[k]) / 8
            else // Retreating
              if ixspdr[k] > 0
                xspdr[k] = xspdr[k] + (160 - yspdr[k]) / 8
              else
                xspdr[k] = xspdr[k] - (160 - yspdr[k]) / 8
              fin
            fin
          else
            iyspdr[k] = -1
          fin
        else
          if attack == k
            attack    = -1 // Stop attack
            iyspdr[k] = -1
          fin
        fin
        if attack <> k
          if ixspdr[k] > 0
            xspdr[k] = xspdr[k] + yspdr[k] / 8
          else
            xspdr[k] = xspdr[k] - yspdr[k] / 8
          fin
          if xspdr[k] < -5 or xspdr[k] > 284
            if xspdr[k] < -5
              xspdr[k]  = -5
              ixspdr[k] = 1
            else
              xspdr[k]  = 284
              ixspdr[k] = -1
            fin
          fin
        fin
        spritePosIndex(xspdr[k], yspdr[k], k + 8)
      fin
    next
    xdelta, ydelta, btn0, btn1 = joypos(ymissle/4)
    xship = xship + (xdelta / 4 - 10)
    if xship < 0;   xship = 0;   fin
    if xship > 279; xship = 279; fin
    if btn0 and ymissle == 255
      spriteAdd(1, sprtMissle)
      xmissle = xship
      ymissle = 176
    fin
    if ymissle <> 255
      if ymissle < 8
        spriteDel(1)
        ymissle = 255
      else
        ymissle = ymissle - 8
        spritePosIndex(xmissle, ymissle, 1)
        for k = 0 to spdrnum
          if yspdr[k] <> 255
            if ymissle >= yspdr[k] - 7 and ymissle <= yspdr[k] + 6
              if xmissle >= xspdr[k] - 10 and xmissle <= xspdr[k] + 10
                //
                // Hit
                //
                if attack == k // Was it attacking?
                  attack = -1
                fin
                yspdr[k] = 255
                ymissle = 255
                spriteAdd(k + 8, spriteDup(sprtDummy))
                spritePosIndex(0, 0, k + 8)
                spriteDel(1)
                spdrcnt--
                if not spdrcnt
                  return
                fin
              fin
            fin
          fin
        next
      fin
    fin
    spritePosIndex(xship, 190, 0)
//    spriteDrawList()
    spriteDrawXorList()
    spriteDrawBuf(hgrSwap())
  until ^$C000 == $9B
  getc
end

hgrMode
spriteDrawBuf(hgrDrawBuf(0)) // So we can see the compile process
sprtShip   = spriteCompile(14, 14,  7, 13, @ship)
sprtMissle = spriteCompile( 6,  8,  3,  0, @missle)
sprtEgg    = spriteCompile(20, 10, 10,  5, @egg)
sprtSpider = spriteCompile(20, 13, 10,  6, @spider)
sprtWeb1   = spriteCompile( 8,  8,  4,  0, @web1)
sprtWeb2   = spriteCompile(12,  8,  6,  0, @web2)
sprtWeb3   = spriteCompile(20,  8, 10,  0, @web3)
sprtDummy  = spriteCompile( 7,  8,  0,  0, @dummy)
hgrColor(0)
hgrClear()
//moire
memcpy($4000, $2000, $2000) // Copy to both buffers
spriteDrawBuf(hgrDrawBuf(1))
spriteAdd(0, sprtShip)
spriteAdd(8, sprtEgg)
game(8)
txtMode
done
