include "inc/cmdsys.plh"
predef nopLin(a, b, c)#0
predef nopPix(a, b)#0

var hspan = @nopLin
var vspan = @nopLin
var plot  = @nopPix
var err, shorterr, shortlen, longerr, longlen

//def nopLin(a, b, c)#0
//end
//def majorline(majorstart, major, majorend, minor, dir, majorspan)#0
//    //
//    // Initial half-span step
//    //
//    err = err + shorterr
//    repeat
//        majorspan(majorstart, major, minor)#0
//        minor      = minor + dir     // Move to next span
//        majorstart = major + 1       // Start of next span = end of previous + 1
//        if err >= 0             // Short span
//            err   = err   + shorterr
//            major = major + shortlen
//        else                    // Long span
//            err   = err   + longerr
//            major = major + longlen
//        fin
//    until major >= majorend
//    //
//    // Final half-span step
//    //
//    majorspan(majorstart, majorend, minor)#0
//end
asm majorline(majorstart, major, majorend, minor, dir, majorspan)#0
!SOURCE    "vmsrc/plvmzp.inc"
        LDA     $1000       ; ERRL
        CLC
        ADC     $2000       ; SHORTERRL
        STA     $1000       ; ERRL
        LDA     $1001       ; ERRH
        ADC     $2001       ; SHORTERRH
        STA     $1001       ; ERRH
        LDA     ESTKL+0,X   ; MAJORSPANL
        STA     $A000
        STA     $B000
        LDA     ESTKH+0,X   ; MAJORSPANH
        STA     $A001
        STA     $B001
end
asm     _majorlineA
-       DEX
        DEX
        DEX
        LDA     ESTKL+8,X   ; MAJORSTARTL
        STA     ESTKL+2,X
        LDA     ESTKH+8,X   ; MAJORSTARTH
        STA     ESTKH+2,X
        LDA     ESTKL+7,X   ; MAJORL
        STA     ESTKL+1,X
        LDA     ESTKH+7,X   ; MAJORH
        STA     ESTKH+1,X
        LDA     ESTKL+5,X   ; MINORL
        STA     ESTKL+0,X
        LDA     ESTKH+5,X   ; MINORH
        STA     ESTKH+0,X
        JSR     $A000

        LDA     ESTKL+2,X   ; MINORL
        CLC
        ADC     ESTKL+1,X   ; DIRL
        STA     ESTKL+2,X
        LDA     ESTKH+2,X   ; MINORH
        ADC     ESTKH+1,X   ; DIRH
        STA     ESTKH+2,X

        LDA     ESTKL+4,X   ; MAJORL
        CLC
        ADC     #$01
        STA     ESTKL+5,X   ; MAJORSTARTL
        LDA     ESTKH+4,X   ; MAJORH
        ADC     #$00
        STA     ESTKH+5,X   ; MAJORSTARTH
end
asm     _majorlineB
        LDA     $1001       ; ERRH
        BMI     +
end
asm     _majorlineC
        LDA     $1000       ; ERRL
        CLC
        ADC     $2000       ; SHORTERRL
        STA     $1000       ; ERRL
        LDA     $1001       ; ERRH
        ADC     $2001       ; SHORTERRH
        STA     $1001       ; ERRH
        LDA     ESTKL+4,X   ; MAJORL
        CLC
        ADC     $3000       ; SHORTLENL
        STA     ESTKL+4,X
        LDA     ESTKH+4,X   ; MAJORH
        ADC     $3001       ; SHORTLENH
        STA     ESTKH+4,X
        BCC     ++
        BCS     ++
end
asm     _majorlineD
+       LDA     $1000       ; ERRL
        CLC
        ADC     $4000       ; LONGERRL
        STA     $1000       ; ERRL
        LDA     $1001       ; ERRH
        ADC     $4001       ; LONGERRL
        STA     $1001       ; ERRH
        LDA     ESTKL+4,X   ; MAJORL
        CLC
        ADC     $5000       ; LONGLENL
        STA     ESTKL+4,X
        LDA     ESTKH+4,X   ; MAJORH
        ADC     $5001       ; LONGLENH
        STA     ESTKH+4,X

++      LDA     ESTKL+4,X   ; MAJORL
        CMP     ESTKL+3,X   ; MAJORENDL
        LDA     ESTKH+4,X   ; MAJORH
        SBC     ESTKH+3,X   ; MAJORENDH
        BCS     +
end
asm     _majorlineE
        JMP     $6000
+       DEX
        DEX
        DEX
        LDA     ESTKL+8,X   ; MAJORSTARTL
        STA     ESTKL+2,X
        LDA     ESTKH+8,X   ; MAJORSTARTH
        STA     ESTKH+2,X
        LDA     ESTKL+6,X   ; MAJORENDL
        STA     ESTKL+1,X
        LDA     ESTKH+6,X   ; MAJORENDH
        STA     ESTKH+1,X
        LDA     ESTKL+5,X   ; MINORL
        STA     ESTKL+0,X
        LDA     ESTKH+5,X   ; MINORH
        STA     ESTKH+0,X
        JSR     $B000
        INX
        INX
        INX
end
asm nopLin(a, b, c)#0
        INX
end
asm nopPix(a, b)#0
        INX
        INX
        RTS
end
export def setlinespans(h, v)#0
    hspan = h
    vspan = v
end
export def linespans(x1, y1, x2, y2)#0
    var dx, dy, dx2, dy2, halflen, rem, sx, sy
    
    sx = 1
    sy = 1
    dx = x2 - x1
    if dx < 0
        sx  = -1; dx = -dx
    fin
    dy = y2 - y1
    if dy < 0
        sy  = -1; dy = -dy
    fin
    if dx >= dy
        if sx < 0
            x1, x2 = x2, x1; sy = -sy
        fin
        if dy == 0
            hspan(x1, x2, y1)#0; return
        fin
        //
        // Half-span length and error
        //
        dy2          = dy * 2
        halflen, rem = divmod(dx, dy2)
        err          = dy2 - rem
        //
        // Long-span length = half-span length * 2
        //
        longlen = (halflen + 1) * 2
        longerr = err * 2
        if longerr >= dy2
            longerr = longerr - dy2
            longlen--
        fin
        //
        // Short-span length = long-span length - 1
        //
        shortlen = longlen - 1
        shorterr = longerr - dy2
        //
        // JIT optimize inner loop
        //
        majorline(x1, x1 + halflen, x2, y1, sy, hspan)
    else
        if sy < 0
            x1, x2 = x2, x1; sx = -sx
        fin
        if dx == 0
            vspan(y1, y2, x1)#0; return
        fin
        //
        // Half-span length and error
        //
        dx2          = dx * 2
        halflen, rem = divmod(dy, dx2)
        err          = dx2 - rem
        //
        // Long-span length = half-span length * 2
        //
        longlen = (halflen + 1) * 2
        longerr = err * 2
        if longerr >= dx2
            longerr = longerr - dx2
            longlen--
        fin
        shortlen = longlen - 1
        shorterr = longerr - dx2
        //
        // JIT optimize inner loop
        //
        majorline(y1, y1 + halflen, y2, x1, sx, vspan)
    fin
end
export def setlineplot(p)#0
    plot = p
end
export def line(x1, y1, x2, y2)#0
    var sx, sy, dx2, dy2, x, y
    
    sx = 1
    sy = 1
    dx2 = (x2 - x1) * 2
    if dx2 < 0
        sx  = -1; dx2 = -dx2
    fin
    dy2 = (y2 - y1) * 2
    if dy2 < 0
        sy  = -1; dy2 = -dy2
    fin
    if dx2 >= dy2
        if sx < 0
            sy = -sy; x1, x2 = x2, x1
        fin
        err = dy2 - dx2 / 2
        for x = x1 to x2
            plot(x, y)
            if err >= 0
                err = err - dx2
                y  = y + sy
            fin
            err = err + dy2
        next
    else
        if sy < 0
            sx = -sx; y1, y2 = y2, y1
        fin
        err = dx2 - dy2 / 2
        for y = y1 to y2
            plot(x, y)
            if err >= 0
                err = err - dy2
                x   = x + sx
            fin
            err = err + dx2
        next
        fin
 end

//
// Assembly fixups
//
majorline:1    = @err
majorline:5    = @shorterr
majorline:8    = @err
majorline:11   = @err.1
majorline:14   = @shorterr.1
majorline:17   = @err.1
majorline:22   = @_majorlineA.28
majorline:25   = @_majorlineE.31
majorline:30   = @_majorlineA.29
majorline:33   = @_majorlineE.32
_majorlineB:1  = @err.1
_majorlineC:1  = @err
_majorlineC:5  = @shorterr
_majorlineC:8  = @err
_majorlineC:11 = @err.1
_majorlineC:14 = @shorterr.1
_majorlineC:17 = @err.1
_majorlineC:23 = @shortlen
_majorlineC:30 = @shortlen.1
_majorlineD:1  = @err
_majorlineD:5  = @longerr
_majorlineD:8  = @err
_majorlineD:11 = @err.1
_majorlineD:14 = @longerr.1
_majorlineD:17 = @err.1
_majorlineD:23 = @longlen
_majorlineD:30 = @longlen.1
_majorlineE:1  = @_majorlineA
done
