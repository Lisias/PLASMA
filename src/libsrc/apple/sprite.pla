include "inc/cmdsys.plh"
include "inc/hgrlib.plh"

struc t_sprite
    var  s_xpos
    var  s_ypos
    byte s_undermap[2]
    byte s_underofst[2]
    byte s_undery[2]
    byte s_pitch
//    var  s_width
    var  s_height
    var  s_size
    var  s_mask[14]
    var  s_map[14]
    var  s_under[14]
end

var spriteList[16]
byte drawpage
//
// Sprite routines
//
def spriteBLTMask(x, y, w, h, srcptr)#0
    word i, j
    byte c
    
    for j = y to y + h - 1
        for i = 0 to w - 1
            c = srcptr->[i >> 1]
            if i & 1
                hgrColor(c & $08 ?? 3 :: 0)
            else
                hgrColor(c & $80 ?? 3 :: 0)
            fin
            hgrPlot(x + i, j)
        next
        srcptr = srcptr + (w + 1) / 2
    next
end
export def spriteCompile(w, h, srcptr)#1
    var sprtptr, bytewidth, spritesize, i
    
    sprtptr             = heapalloc(t_sprite)
    bytewidth           = (w + 7) / 7 + 1
    sprtptr->s_pitch    = bytewidth
    spritesize          = bytewidth * h
    sprtptr=>s_size     = spritesize
//    sprtptr=>s_width    = w
    sprtptr=>s_height   = h
    sprtptr=>s_under[0] = heapalloc(spritesize)
    sprtptr=>s_under[1] = heapalloc(spritesize)
    for i = 0 to 13
        sprtptr=>s_map[i]  = heapalloc(spritesize)
        sprtptr=>s_mask[i] = heapalloc(spritesize)
        hgrColor(0)
        hgrRect(0, w + 21, 0, h - 1)
        hgrBLT(i, 0, w, h, srcptr)
        hgrCopyDst(i > 6 ?? 1 :: 0, 0, bytewidth, h, sprtptr=>s_map[i])
        hgrColor(3)
        hgrRect(0, w + 21, h, h * 2 - 1)
        spriteBLTMask(i,  h, w, h, srcptr)
        hgrCopyDst(i > 6 ?? 1 :: 0, h, bytewidth, h, sprtptr=>s_mask[i])
    next
    sprtptr->s_underofst[0] = 255 // Mark as under not valid
    sprtptr->s_underofst[1] = 255
    return sprtptr
end
export def spriteDup(sprtsrc)#1
    var sprtdup, spritesize
    byte i
    
    sprtdup             = heapalloc(t_sprite)
    spritesize          = sprtsrc=>s_size
    sprtdup=>s_size     = spritesize
    sprtdup->s_pitch    = sprtsrc->s_pitch 
//    sprtdup=>s_width    = sprtsrc=>s_width
    sprtdup=>s_height   = sprtsrc=>s_height
    sprtdup=>s_under[0] = heapalloc(spritesize)
    sprtdup=>s_under[1] = heapalloc(spritesize)
    for i = 0 to 13
        sprtdup=>s_map[i]  = sprtsrc=>s_map[i]
        sprtdup=>s_mask[i] = sprtsrc=>s_mask[i]
    next
    sprtdup->s_underofst[0] = 255 // Mark as under not valid
    sprtdup->s_underofst[1] = 255
    return sprtdup
end
export def spriteDraw(sprtptr)#0
    byte ofst, map, y
    var width, height
    
    y = sprtptr->s_ypos
    ofst, map = divmod7(sprtptr=>s_xpos)
    if ofst & 1
        map = map + 7
    fin
    sprtptr->s_underofst[drawpage] = ofst
    sprtptr->s_undery[drawpage]    = y
    width  = sprtptr->s_pitch
    height = sprtptr=>s_height
    hgrCopyDst(ofst, y, width, height, sprtptr=>s_under[drawpage])
    hgrAndSrc( ofst, y, width, height, sprtptr=>s_mask[map])
    hgrXorSrc( ofst, y, width, height, sprtptr=>s_map[map])
end
export def spriteUnDraw(sprtptr)#0
    if sprtptr->s_underofst[drawpage] < 40
        hgrCopySrc(sprtptr->s_underofst[drawpage], sprtptr->s_undery[drawpage], sprtptr->s_pitch, sprtptr=>s_height, sprtptr=>s_under[drawpage])
    fin
end
export def spriteDrawXor(sprtptr)#0
    byte ofst, map, y
    var width, height
    
    y = sprtptr->s_ypos
    ofst, map = divmod7(sprtptr=>s_xpos)
    if ofst & 1
        map = map + 7
    fin
    sprtptr->s_undermap[drawpage]  = map
    sprtptr->s_underofst[drawpage] = ofst
    sprtptr->s_undery[drawpage]    = y
    width  = sprtptr->s_pitch
    height = sprtptr=>s_height
    hgrXorSrc( ofst, y, width, height, sprtptr=>s_map[map])
end
export def spriteUnDrawXor(sprtptr)#0
    if sprtptr->s_underofst[drawpage] < 40
        hgrXorSrc(sprtptr->s_underofst[drawpage], sprtptr->s_undery[drawpage], sprtptr->s_pitch, sprtptr=>s_height, sprtptr=>s_map[sprtptr->s_undermap[drawpage]])
    fin
end
export def spritePos(x, y, sprtptr)#0
    sprtptr=>s_ypos = y
    sprtptr=>s_xpos = x
end
export def spritePosIndex(x, y, i)#0
    i = i & 15
    if spriteList[i]
        spriteList[i]=>s_ypos = y
        spriteList[i]=>s_xpos = x
    fin
end
export def spriteDrawList#0
    byte i
    
    for i = 15 downto 0
        if spriteList[i]
            spriteUnDraw(spriteList[i])
        fin
    next
    for i = 0 to 15
        if spriteList[i]
            spriteDraw(spriteList[i])
        fin
    next
end
export def spriteDrawXorList#0
    byte i
    for i = 0 to 15
        if spriteList[i]
            spriteUnDrawXor(spriteList[i])
            spriteDrawXor(spriteList[i])
        fin
    next
end
export def spriteAdd(i, sprtptr)#1
    var sprtprev
    
    i = i & 15
    sprtprev = spriteList[i]
    spriteList[i] = sprtptr
    return sprtprev
end
export def spriteDel(i)#1
    var sprtprev
    
    i = i & 15
    sprtprev = spriteList[i]
    spriteList[i] = 0
    return sprtprev
end
export def spriteDrawBuf(page)#0
    drawpage = page & 1
end
done
